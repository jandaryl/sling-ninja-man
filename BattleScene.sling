class is SpriteSceneWithEntities imports cape imports cave imports motion #battleScene:

var audioManager as AudioManager
var bgStream as AudioStream
var clickStream as AudioStream
var quitBtnEntity as TextButtonEntity
var bgWallEntity as BackgroundWallEntity
var playerSprite as PlayerEntity
var leftBottomWall as LeftBottomWallEntity
var bossHealthProp as TextProperties
var bossHealthSprite as TextSprite
var playerHealthProp as TextProperties
var playerHealthSprite as TextSprite
var timeBattleProp as TextProperties
var timeBattleSprite as TextSprite
var wallHealth = 100 as int
var timer = 1000 as int

func initialize override
{
    base.initialize()

    // Add the background music.
    audioManager = AudioManager.forApplication(context)

    if (audioManager != null) {
        bgStream = audioManager.getStreamForResource("main-scene")
        
        if (bgStream != null) {
            bgStream.play()
            bgStream.setLooping(true)
            PRINT "[LOG] Background music is working"
        }
    }

    // Add the moving background image.
    addEntity(new MovingBackgroundEntity())

    // Add the quit button.
    quitBtnEntity = TextButtonEntity.forText("Quit")
    quitBtnEntity.setBackgroundColor(Color.white())
    addEntity(quitBtnEntity)
    quitBtnEntity.move(getReferenceWidth() * 0.9 - (quitBtnEntity.getWidth() * 0.5), getReferenceHeight() * 0.1 - (quitBtnEntity.getHeight() * 0.5))

    // Add the background wall sprite.
    addEntity(bgWallEntity = new BackgroundWallEntity())
 
    // Add the left bottom wall sprite.
    addEntity(leftBottomWall = new LeftBottomWallEntity())

    // Add the player sprite.
    addEntity(playerSprite = new PlayerEntity())

    playerHealthProp = TextProperties.forText("Player Health : 100")
	playerHealthProp.setTextColor(Color.white())
	playerHealthProp.setFontSizeRelative(0.025)
	playerHealthProp.setFontFamily("Fira Code")
	playerHealthProp.setFontIsItalic(true)

	playerHealthSprite = addTextSprite(playerHealthProp)
	playerHealthSprite.setText(playerHealthProp)
	playerHealthSprite.move(0.0, getReferenceHeight() - playerHealthSprite.getHeight())

    timeBattleProp = TextProperties.forText("Time Limit 1000")
	timeBattleProp.setTextColor(Color.white())
	timeBattleProp.setFontSizeRelative(0.02)
	timeBattleProp.setFontFamily("Fira Code")
	timeBattleProp.setFontIsItalic(true)

	timeBattleSprite = addTextSprite(timeBattleProp)
	timeBattleSprite.setText(timeBattleProp)
	timeBattleSprite.move(getReferenceWidth() * 0.5 - (timeBattleSprite.getWidth() * 0.5), getReferenceHeight() * 0.07 - (timeBattleSprite.getHeight() * 0.5))


    bossHealthProp = TextProperties.forText("Wall Health : 100")
	bossHealthProp.setTextColor(Color.white())
	bossHealthProp.setFontSizeRelative(0.025)
	bossHealthProp.setFontFamily("Fira Code")
	bossHealthProp.setFontIsItalic(true)

	bossHealthSprite = addTextSprite(bossHealthProp)
	bossHealthSprite.setText(bossHealthProp)
	bossHealthSprite.move(0.7, getReferenceHeight() - bossHealthSprite.getHeight())

    // Add the player movement via pointer/keymaps.
    // Add the player sword skill animation.
    // Add the slash sound effect.
    // Add the player bomb skill.
    // Add the explosion sound effect.
    // Add the player scoring.
    // Add the score count effect.
    // Add the player teleport skill.
    // Add the player health.
    // Add the player fading out.
    // Add the last sound effect.
    // Add the monster sprite.
    // Add the monster detection skill.
    // Add the monster movement.
    // Add the monster walk sound effect.
    // Add the monster shoot skill.
    // Add the monster health.
    // Add the monster fading out.
    // Add the boss sprite.
    // Add the boss detection skill.
    // Add the boss anger sound effect.
    // Add the boss movement.
    // Add the boss walk sound effect.
}

func getPlayerSpriteEntity as PlayerEntity
{
    return playerSprite
}

func getBackgroundWallEntity as BackgroundWallEntity
{
    return bgWallEntity
}

func getLeftBottomWall as LeftBottomWallEntity
{
    return leftBottomWall
}

func setWallHealth
{
    if (wallHealth >= 0) {
        bossHealthProp.setText("Wall Health: " .. String.forInteger(wallHealth -= 10))
	    bossHealthSprite.setText(bossHealthProp)
    }

    if (wallHealth <= 0) {
        removeSprite(bossHealthSprite)
    }
}

func setTimeLimit
{
    if (timer >= 0) {
        timeBattleProp.setText("Time Limit " .. String.forInteger(timer--))
	    timeBattleSprite.setText(timeBattleProp)
    }

    if (timer <= 0) {
        removeSprite(timeBattleSprite)
    }
}

func onPointerEvent(event as PointerEvent) override
{
    base.onPointerEvent(event)
    
	if (event.action == PointerEvent.DOWN) {
		
        if (event.isInside(quitBtnEntity.getX(), quitBtnEntity.getY(), quitBtnEntity.getWidth(), quitBtnEntity.getHeight())) {
            
            // Add click sound effect.
            audioManager = AudioManager.forApplication(context)

            if (audioManager != null) {
                clickStream = audioManager.getStreamForResource("main-scene")
                
                if (clickStream != null) {
                    clickStream.play()
                    clickStream.setLooping(true)
                    PRINT "[LOG] Click sound effect from Quit Button is working"
                }
            }

            pushScene(new MainScene())
            PRINT "[LOG] Change to Main Scene"
        }
	}

}


func tick(gameTime as TimeValue, delta as double) override
{
	base.tick(gameTime, delta)

    setTimeLimit()

    if (timer == 0) {
        pushScene(new GameOverScene())
    }

    if (wallHealth <= 80) {
        leftBottomWall.setAlpha(0.80)
    }

    if (wallHealth <= 40) {
        leftBottomWall.setAlpha(0.40)
    }

    if (wallHealth <= 20) {
        leftBottomWall.setAlpha(0.20)
    }

    if (wallHealth <= 0) {
        removeEntity(leftBottomWall)
    }
}


func cleanup override
{
    if (bgStream != null) {
		bgStream.stop()
	}

    if (clickStream != null) {
		clickStream.stop()
	}

    removeAllEntities()
    PRINT "[LOG] Remove all entities from battle scene"
    removeAllSprites()
    PRINT "[LOG] Remove all sprites from battle scene"
}

